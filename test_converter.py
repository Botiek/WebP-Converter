#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ WebP –≤ PNG
"""

import os
import sys
from PIL import Image
import tempfile

def create_test_webp():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π WebP —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new('RGB', (100, 100), color='red')
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        temp_dir = tempfile.mkdtemp()
        test_webp = os.path.join(temp_dir, 'test.webp')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ WebP
        img.save(test_webp, 'WEBP')
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π WebP —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {test_webp}")
        return test_webp, temp_dir
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return None, None

def test_conversion(webp_path):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é WebP –≤ PNG"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from webp_to_png_converter import convert_webp_to_png
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        png_path = webp_path.replace('.webp', '.png')
        success = convert_webp_to_png(webp_path, png_path)
        
        if success and os.path.exists(png_path):
            print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {png_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            webp_size = os.path.getsize(webp_path)
            png_size = os.path.getsize(png_path)
            print(f"üìä –†–∞–∑–º–µ—Ä WebP: {webp_size} –±–∞–π—Ç")
            print(f"üìä –†–∞–∑–º–µ—Ä PNG: {png_size} –±–∞–π—Ç")
            
            return True
        else:
            print("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ WebP –≤ PNG")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    try:
        from PIL import Image
        print("‚úÖ Pillow —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install Pillow")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    webp_path, temp_dir = create_test_webp()
    if not webp_path:
        return
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
        success = test_conversion(webp_path)
        
        if success:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print("–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        else:
            print("\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.")
            
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if temp_dir and os.path.exists(temp_dir):
            import shutil
            shutil.rmtree(temp_dir)
            print(f"üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")

if __name__ == "__main__":
    main()

