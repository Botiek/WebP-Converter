#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
WebP to PNG Converter
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä WebP —Ñ–∞–π–ª–æ–≤ –≤ PNG —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
"""

import os
import sys
import argparse
from pathlib import Path
import subprocess
import shutil

def install_pillow():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É Pillow –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"""
    try:
        import PIL
        return True
    except ImportError:
        print("‚ö†Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Pillow...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "Pillow"])
            return True
        except subprocess.CalledProcessError:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Pillow")
            return False

def convert_webp_to_png(input_path, output_path=None, delete_original=False):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç WebP —Ñ–∞–π–ª –≤ PNG
    
    Args:
        input_path (str): –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É WebP —Ñ–∞–π–ª—É
        output_path (str, optional): –ü—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ PNG —Ñ–∞–π–ª–∞
        delete_original (bool): –£–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    
    Returns:
        bool: True –µ—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        from PIL import Image
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º WebP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with Image.open(input_path) as img:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ RGBA –∏–ª–∏ LA
            if img.mode in ('RGBA', 'LA'):
                # –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
                background = Image.new('RGB', img.size, (255, 255, 255))
                if img.mode == 'RGBA':
                    background.paste(img, mask=img.split()[-1])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª –∫–∞–∫ –º–∞—Å–∫—É
                else:  # LA —Ä–µ–∂–∏–º
                    background.paste(img, mask=img.split()[-1])
                img = background
            elif img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if output_path is None:
                output_path = str(Path(input_path).with_suffix('.png'))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG
            img.save(output_path, 'PNG', optimize=True)
            
            print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {input_path} ‚Üí {output_path}")
            
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if delete_original:
                try:
                    os.remove(input_path)
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {input_path}")
                except OSError as e:
                    print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {e}")
            
            return True
            
    except ImportError:
        print("‚ùå –û—à–∏–±–∫–∞: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {input_path}: {e}")
        return False

def process_directory(directory_path, delete_original=False):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ WebP —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    Args:
        directory_path (str): –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        delete_original (bool): –£–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    
    Returns:
        tuple: (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤)
    """
    directory = Path(directory_path)
    if not directory.is_dir():
        print(f"‚ùå –û—à–∏–±–∫–∞: {directory_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π")
        return 0, 0
    
    webp_files = list(directory.glob("**/*.webp"))  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
    if not webp_files:
        print(f"‚ÑπÔ∏è –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ WebP —Ñ–∞–π–ª–æ–≤")
        return 0, 0
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(webp_files)} WebP —Ñ–∞–π–ª–æ–≤ –≤ {directory_path}")
    
    success_count = 0
    for webp_file in webp_files:
        if convert_webp_to_png(str(webp_file), delete_original=delete_original):
            success_count += 1
    
    return success_count, len(webp_files)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä WebP —Ñ–∞–π–ª–æ–≤ –≤ PNG —Ñ–æ—Ä–º–∞—Ç",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s image.webp                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  %(prog)s image.webp --delete           # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
  %(prog)s photos/ --delete              # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–∞–ø–∫–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º
  %(prog)s image.webp -o result.png      # –£–∫–∞–∑–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        """
    )
    
    parser.add_argument("input", help="–ü—É—Ç—å –∫ WebP —Ñ–∞–π–ª—É –∏–ª–∏ –ø–∞–ø–∫–µ")
    parser.add_argument("--delete", action="store_true", 
                       help="–£–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ WebP —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    parser.add_argument("-o", "--output", 
                       help="–ü—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ PNG —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)")
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø—É—Ç–∏
    if not os.path.exists(args.input):
        print(f"‚ùå –û—à–∏–±–∫–∞: –ü—É—Ç—å {args.input} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return 1
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Pillow –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not install_pillow():
        return 1
    
    input_path = Path(args.input)
    
    if input_path.is_file():
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if input_path.suffix.lower() != '.webp':
            print(f"‚ùå –û—à–∏–±–∫–∞: {input_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è WebP —Ñ–∞–π–ª–æ–º")
            return 1
        
        if convert_webp_to_png(str(input_path), args.output, args.delete):
            print("üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return 0
        else:
            print("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            return 1
    
    elif input_path.is_dir():
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if args.output:
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: --output –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        
        success_count, total_count = process_directory(str(input_path), args.delete)
        
        if success_count == total_count:
            print(f"üéâ –í—Å–µ {total_count} —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return 0
        else:
            print(f"‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {success_count} –∏–∑ {total_count} —Ñ–∞–π–ª–æ–≤")
            return 1 if success_count == 0 else 0
    
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {input_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π")
        return 1

if __name__ == "__main__":
    sys.exit(main())

