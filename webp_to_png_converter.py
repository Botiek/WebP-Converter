#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä WebP –≤ PNG –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é Windows
"""

import sys
import os
from PIL import Image
import argparse

def convert_webp_to_png(input_path, output_path=None):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç WebP —Ñ–∞–π–ª –≤ PNG —Ñ–æ—Ä–º–∞—Ç
    
    Args:
        input_path (str): –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É WebP —Ñ–∞–π–ª—É
        output_path (str, optional): –ü—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ PNG —Ñ–∞–π–ª–∞
    """
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º WebP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with Image.open(input_path) as img:
            # –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if output_path is None:
                base_name = os.path.splitext(input_path)[0]
                output_path = f"{base_name}.png"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ RGBA
            if img.mode in ('RGBA', 'LA'):
                # –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                background = Image.new('RGB', img.size, (255, 255, 255))
                if img.mode == 'RGBA':
                    background.paste(img, mask=img.split()[-1])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª –∫–∞–∫ –º–∞—Å–∫—É
                else:
                    background.paste(img)
                img = background
            elif img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG
            img.save(output_path, 'PNG', optimize=True)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {input_path} -> {output_path}")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {input_path}: {str(e)}")
        return False

def main():
    parser = argparse.ArgumentParser(description='–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä WebP –≤ PNG')
    parser.add_argument('input', help='–ü—É—Ç—å –∫ WebP —Ñ–∞–π–ª—É –∏–ª–∏ –ø–∞–ø–∫–µ')
    parser.add_argument('-o', '--output', help='–ü—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
    parser.add_argument('-r', '--recursive', action='store_true', help='–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞–ø–∫–∏')
    
    args = parser.parse_args()
    
    input_path = args.input
    
    if not os.path.exists(input_path):
        print(f"‚ùå –§–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {input_path}")
        sys.exit(1)
    
    if os.path.isfile(input_path):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª
        if input_path.lower().endswith('.webp'):
            convert_webp_to_png(input_path, args.output)
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è WebP: {input_path}")
            sys.exit(1)
    
    elif os.path.isdir(input_path):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫—É
        converted_count = 0
        total_count = 0
        
        if args.recursive:
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥
            for root, dirs, files in os.walk(input_path):
                for file in files:
                    if file.lower().endswith('.webp'):
                        total_count += 1
                        file_path = os.path.join(root, file)
                        if convert_webp_to_png(file_path):
                            converted_count += 1
        else:
            # –¢–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
            for file in os.listdir(input_path):
                if file.lower().endswith('.webp'):
                    total_count += 1
                    file_path = os.path.join(input_path, file)
                    if convert_webp_to_png(file_path):
                        converted_count += 1
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {converted_count}/{total_count} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        
        if converted_count > 0:
            print("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è  WebP —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()

