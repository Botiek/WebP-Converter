#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä WebP –≤ PNG –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é Windows
"""

import sys
import os
from PIL import Image
import argparse

def convert_webp_to_png(input_path, output_path=None, delete_original=False):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç WebP —Ñ–∞–π–ª –≤ PNG —Ñ–æ—Ä–º–∞—Ç
    
    Args:
        input_path (str): –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É WebP —Ñ–∞–π–ª—É
        output_path (str, optional): –ü—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ PNG —Ñ–∞–π–ª–∞
        delete_original (bool): –£–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    """
    try:
        with Image.open(input_path) as img:
            if output_path is None:
                base_name = os.path.splitext(input_path)[0]
                output_path = f"{base_name}.png"
            
            if img.mode in ('RGBA', 'LA'):
                background = Image.new('RGB', img.size, (255, 255, 255))
                if img.mode == 'RGBA':
                    background.paste(img, mask=img.split()[-1])
                else:
                    background.paste(img)
                img = background
            elif img.mode != 'RGB':
                img = img.convert('RGB')
            
            img.save(output_path, 'PNG', optimize=True)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {input_path} -> {output_path}")
            
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if delete_original:
                try:
                    os.remove(input_path)
                    print(f"üóëÔ∏è  –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {input_path}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª {input_path}: {str(e)}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {input_path}: {str(e)}")
        return False

def process_directory(directory_path, delete_original=False):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ WebP —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    Args:
        directory_path (str): –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        delete_original (bool): –£–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    """
    if not os.path.isdir(directory_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: {directory_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π")
        return False
    
    webp_files = []
    for root, dirs, files in os.walk(directory_path):
        for file in files:
            if file.lower().endswith('.webp'):
                webp_files.append(os.path.join(root, file))
    
    if not webp_files:
        print(f"üìÅ –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ WebP —Ñ–∞–π–ª–æ–≤")
        return True
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(webp_files)} WebP —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    print()
    
    success_count = 0
    for webp_file in webp_files:
        if convert_webp_to_png(webp_file, delete_original=delete_original):
            success_count += 1
        print()
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(webp_files)} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")
    return success_count == len(webp_files)

def main():
    parser = argparse.ArgumentParser(
        description='–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä WebP —Ñ–∞–π–ª–æ–≤ –≤ PNG —Ñ–æ—Ä–º–∞—Ç',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s file.webp                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª
  %(prog)s file.webp --delete          # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π
  %(prog)s folder/ --delete            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ WebP –≤ –ø–∞–ø–∫–µ
  %(prog)s folder/ --output output.png # –£–∫–∞–∑–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        """
    )
    
    parser.add_argument('input', help='–ü—É—Ç—å –∫ WebP —Ñ–∞–π–ª—É –∏–ª–∏ –ø–∞–ø–∫–µ')
    parser.add_argument('-o', '--output', help='–ü—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ PNG —Ñ–∞–π–ª–∞')
    parser.add_argument('-d', '--delete', action='store_true', 
                       help='–£–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ WebP —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.input):
        print(f"‚ùå –û—à–∏–±–∫–∞: –ü—É—Ç—å {args.input} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return 1
    
    if os.path.isfile(args.input):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not args.input.lower().endswith('.webp'):
            print(f"‚ùå –û—à–∏–±–∫–∞: {args.input} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è WebP —Ñ–∞–π–ª–æ–º")
            return 1
        
        success = convert_webp_to_png(args.input, args.output, args.delete)
        return 0 if success else 1
    
    elif os.path.isdir(args.input):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        success = process_directory(args.input, args.delete)
        return 0 if success else 1
    
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {args.input} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)

